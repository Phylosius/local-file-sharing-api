swagger: '2.0'
info:
  title: File Sharing API
  description: API for file hosting
  contact:
    email: hei.phylosius@gmail.com
  license:
    name: MIT License
  version: v1
host: localhost:8000
schemes:
- http
basePath: /
consumes:
- application/json
produces:
- application/json
securityDefinitions:
  Basic:
    type: basic
security:
- Basic: []
paths:
  /dj-rest-auth/login/:
    post:
      operationId: dj-rest-auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Login'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/Login'
      tags:
      - dj-rest-auth
    parameters: []
  /dj-rest-auth/logout/:
    get:
      operationId: dj-rest-auth_logout_list
      summary: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.
      description: Accepts/Returns nothing.
      parameters: []
      responses:
        '200':
          description: ''
      tags:
      - dj-rest-auth
    post:
      operationId: dj-rest-auth_logout_create
      summary: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.
      description: Accepts/Returns nothing.
      parameters: []
      responses:
        '201':
          description: ''
      tags:
      - dj-rest-auth
    parameters: []
  /dj-rest-auth/password/change/:
    post:
      operationId: dj-rest-auth_password_change_create
      summary: Calls Django Auth SetPasswordForm save method.
      description: |-
        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/PasswordChange'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/PasswordChange'
      tags:
      - dj-rest-auth
    parameters: []
  /dj-rest-auth/password/reset/:
    post:
      operationId: dj-rest-auth_password_reset_create
      summary: Calls Django Auth PasswordResetForm save method.
      description: |-
        Accepts the following POST parameters: email
        Returns the success/fail message.
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/PasswordReset'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/PasswordReset'
      tags:
      - dj-rest-auth
    parameters: []
  /dj-rest-auth/password/reset/confirm/:
    post:
      operationId: dj-rest-auth_password_reset_confirm_create
      summary: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.
      description: |-
        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/PasswordResetConfirm'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/PasswordResetConfirm'
      tags:
      - dj-rest-auth
    parameters: []
  /dj-rest-auth/user/:
    get:
      operationId: dj-rest-auth_user_read
      summary: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.
      description: |-
        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/UserDetails'
      tags:
      - dj-rest-auth
    put:
      operationId: dj-rest-auth_user_update
      summary: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.
      description: |-
        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/UserDetails'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/UserDetails'
      tags:
      - dj-rest-auth
    patch:
      operationId: dj-rest-auth_user_partial_update
      summary: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.
      description: |-
        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/UserDetails'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/UserDetails'
      tags:
      - dj-rest-auth
    parameters: []
  /models/files/:
    get:
      operationId: models_files_list
      description: ''
      parameters:
      - name: upload_date
        in: query
        description: upload_date
        required: false
        type: string
      - name: size
        in: query
        description: size
        required: false
        type: string
      - name: search
        in: query
        description: A search term.
        required: false
        type: string
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/FileInfo'
      tags:
      - models
    post:
      operationId: models_files_create
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/FileInfo'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/FileInfo'
      tags:
      - models
    parameters: []
  /models/files/{id}/:
    get:
      operationId: models_files_read
      description: ''
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/FileInfo'
      tags:
      - models
    put:
      operationId: models_files_update
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/FileInfo'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/FileInfo'
      tags:
      - models
    patch:
      operationId: models_files_partial_update
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/FileInfo'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/FileInfo'
      tags:
      - models
    delete:
      operationId: models_files_delete
      description: ''
      parameters: []
      responses:
        '204':
          description: ''
      tags:
      - models
    parameters:
    - name: id
      in: path
      description: A UUID string identifying this File info.
      required: true
      type: string
      format: uuid
definitions:
  Login:
    required:
    - password
    type: object
    properties:
      username:
        title: Username
        type: string
      email:
        title: Email
        type: string
        format: email
      password:
        title: Password
        type: string
        minLength: 1
  PasswordChange:
    required:
    - new_password1
    - new_password2
    type: object
    properties:
      new_password1:
        title: New password1
        type: string
        maxLength: 128
        minLength: 1
      new_password2:
        title: New password2
        type: string
        maxLength: 128
        minLength: 1
  PasswordReset:
    required:
    - email
    type: object
    properties:
      email:
        title: Email
        type: string
        format: email
        minLength: 1
  PasswordResetConfirm:
    required:
    - new_password1
    - new_password2
    - uid
    - token
    type: object
    properties:
      new_password1:
        title: New password1
        type: string
        maxLength: 128
        minLength: 1
      new_password2:
        title: New password2
        type: string
        maxLength: 128
        minLength: 1
      uid:
        title: Uid
        type: string
        minLength: 1
      token:
        title: Token
        type: string
        minLength: 1
  UserDetails:
    required:
    - username
    type: object
    properties:
      pk:
        title: Id
        type: string
        format: uuid
        readOnly: true
      username:
        title: Username
        description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
          only.
        type: string
        pattern: ^[\w.@+-]+$
        maxLength: 150
        minLength: 1
      email:
        title: Email address
        type: string
        format: email
        readOnly: true
        minLength: 1
      first_name:
        title: First name
        type: string
        maxLength: 150
      last_name:
        title: Last name
        type: string
        maxLength: 150
  FileInfo:
    required:
    - uploadDate
    - name
    - size
    type: object
    properties:
      id:
        title: Id
        type: string
        format: uuid
        readOnly: true
      uploadDate:
        title: Uploaddate
        type: string
        format: date-time
      name:
        title: Name
        type: string
        maxLength: 255
        minLength: 1
      size:
        title: Size
        type: integer
        maximum: 2147483647
        minimum: -2147483648
      file:
        title: File
        type: string
        readOnly: true
        x-nullable: true
        format: uri
